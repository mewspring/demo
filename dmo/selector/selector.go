// generated by Textmapper; DO NOT EDIT

package selector

import (
	"github.com/mewspring/demo/dmo"
)

type Selector func(nt dmo.NodeType) bool

var (
	Any             = func(t dmo.NodeType) bool { return true }
	Command         = func(t dmo.NodeType) bool { return t == dmo.Command }
	CommandTypeEnum = func(t dmo.NodeType) bool { return t == dmo.CommandTypeEnum }
	EventData       = func(t dmo.NodeType) bool { return t == dmo.EventData }
	EventType       = func(t dmo.NodeType) bool { return t == dmo.EventType }
	File            = func(t dmo.NodeType) bool { return t == dmo.File }
	FileHeader      = func(t dmo.NodeType) bool { return t == dmo.FileHeader }
	FloatLit        = func(t dmo.NodeType) bool { return t == dmo.FloatLit }
	IntLit          = func(t dmo.NodeType) bool { return t == dmo.IntLit }
)

func OneOf(types ...dmo.NodeType) Selector {
	if len(types) == 0 {
		return func(dmo.NodeType) bool { return false }
	}
	const bits = 32
	max := 1
	for _, t := range types {
		if int(t) > max {
			max = int(t)
		}
	}
	size := (max + bits) / bits
	bitarr := make([]uint32, size)
	for _, t := range types {
		bitarr[uint(t)/bits] |= 1 << (uint(t) % bits)
	}
	return func(t dmo.NodeType) bool {
		i := uint(t) / bits
		return int(i) < len(bitarr) && bitarr[i]&(1<<(uint(t)%bits)) != 0
	}
}
